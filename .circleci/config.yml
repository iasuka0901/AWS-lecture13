# ----------------------------------------------------------
# version: 2.1: CircleCIの設定ファイルのバージョンを指定
# aws-cli: AWS CLI関連の操作を簡単にするためのOrb
# aws-cloudformation: CloudFormationを簡単に扱うためのOrb
# ansible-playbook: Ansibleプレイブックを簡単に実行するためのOrb
# ----------------------------------------------------------
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-cloudformation: orbss/aws-cloudformation@0.1.6
  ansible-playbook: orbss/ansible-playbook@0.0.5 

# cfn-lintジョブを定義
# GitHubリポジトリの内容をチェックアウト
# pip（Pythonのパッケージ管理ツール）最新バージョンにアップデート
# cfn-lint（CloudFormationテンプレートの構文を検証するツール）をインストール
# cfn-lintを使ってCloudFormationテンプレート（cloudformationフォルダ内のすべての.ymlファイル）を検証
jobs:
  cfn-lint:
    docker:
      - image: cimg/python:3.11.0 
    steps:
      - checkout
      - run: python --version
      - run: pip install --upgrade pip
      - run: pip --version
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

# ジョブ定義: execute-cloudformation
# AWS CLIのセットアップを行い、環境変数に設定されたキー情報（AWS_ACCESS_KEY_IDなど）を使用
# CloudFormationテンプレート（VPC.yml）をデプロイしスタック名としてcircleci-test-VPCを指定
# --capabilities CAPABILITY_NAMED_IAM: IAMリソースの作成を許可するオプション
  execute-cloudformation:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: cloudformation deploy
          command: |
            set -x 
            aws cloudformation deploy --template-file cloudformation/VPC.yml --stack-name circleci-test-VPC
            aws cloudformation deploy --template-file cloudformation/EC2-RDS.yml --stack-name circleci-test-EC2-RDS --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation deploy --template-file cloudformation/S3.yml --stack-name circleci-test-S3 --capabilities CAPABILITY_NAMED_IAM
            #aws cloudformation deploy --template-file cloudformation/IPSet.yml --stack-name circleci-test-IPset
            
      - run:
          name: 環境変数の設定
          command: |
            # Define variables
            # スタックの名前とシクレットマネージャーの名前を設定
            STACK_NAME="circleci-test-EC2-RDS" 
            STACK_NAME2="circleci-test-S3"
            SECRET_NAME="MyRDSSecret"
            REGION="ap-northeast-1"
            ElasticIP=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='ElasticIP'].OutputValue" --output text --region $REGION --no-cli-pager)
            echo "export ElasticIP=$ElasticIP" >> .env_var
            # RDSのエンドポイントを環境変数に設定
            RDS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='RDSInstanceEndpoint'].OutputValue" --output text --region $REGION --no-cli-pager)
            #出力した変数を環境変数に設定
            echo "export RDS_ENDPOINT=$(printf '%q' $RDS_ENDPOINT)" >> .env_var

            RDS_PASSWORD=$(aws secretsmanager get-secret-value --secret-id $SECRET_NAME --query "SecretString" --output text --region $REGION | jq -r '.password')
            echo "export RDS_PASSWORD=$(printf '%q' $RDS_PASSWORD)" >> .env_var
            # ロードバランサーのDNSを環境変数に出力して設定
            DNS_NAME=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='ALBEndpoint'].OutputValue" --output text --region $REGION --no-cli-pager)
            echo "export DNS_NAME=$DNS_NAME" >> .env_var
            # S3を出力して環境変数に設定
            S3_NAME=$(aws cloudformation describe-stacks --stack-name $STACK_NAME2 --query "Stacks[0].Outputs[?OutputKey=='lecture13appbucket'].OutputValue" --output text --region $REGION --no-cli-pager)
            echo "export S3_NAME=$S3_NAME" >> .env_var
            password=$(aws secretsmanager get-secret-value --secret-id MyRDSSecret --region ap-northeast-1 --query 'SecretString' --output text | jq -r .password)
            echo $password > /tmp/RDS_PASSWORD.txt

      - run:
          name: check environment variables
          command: |
            source .env_var
            echo "ElasticIP: $ElasticIP"
            echo "RDS_ENDPOINT: $RDS_ENDPOINT"
            echo "export RDS_PASSWORD=$(cat /tmp/RDS_PASSWORD.txt)" >> $BASH_ENV
            echo "DNS_NAME: $DNS_NAME"
            echo "S3_NAME: $S3_NAME"
          no_output_timeout: 30m
      - persist_to_workspace:
          root: .
          paths:
            - .env_var
  execute-ansible:
    executor: ansible-playbook/default
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: python -m pip install --upgrade pip
          command: python -m pip install --force-reinstall --upgrade pip
      - add_ssh_keys:
          fingerprints:
          - "SHA256:KOyzFQxvG/olTvvKdqUsZfKalbDceS8lMYyiTxHgy2Q"
      - run: 
          name: install ansible
          command: pip install ansible==2.10.7
      - run:
          name: Install community.mysql collection
          command: |
            ansible-galaxy collection install community.mysql -vvv
      - run:
          name: Use Environment Variable
          command: |
            source .env_var
            echo $RDS_ENDPOINT
            echo $RDS_PASSWORD
            echo $ElasticIP
            echo $DNS_NAME
            echo $S3_NAME
      - run:
          name: Replacing environment variables in Sed
          command: |
            source .env_var
            echo $ElasticIP
            sed -i "s/ElasticIP/${ElasticIP}/g" ansible/inventory
            cat ansible/inventory
            sed -i "s/RDS_ENDPOINT/${RDS_ENDPOINT}/g" ansible/playbook.yml
            sed -i "s/RDS_PASSWORD/${RDS_PASSWORD}/g" ansible/playbook.yml
            sed -i "s/DNS_NAME/${DNS_NAME}/g" ansible/playbook.yml
            sed -i "s/S3_NAME/${S3_NAME}/g" ansible/playbook.yml
            cat ansible/playbook.yml
          no_output_timeout: 30m
      - run:
          name: Run Ansible Playbook with increased timeout
          no_output_timeout: 60m  
          command: |
            ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook ansible/playbook.yml -u ec2-user -i ansible/inventory -e "RDS_PASSWORD=$RDS_PASSWORD" --private-key /home/circleci/AWS-access/lecture13.pem

  execute-serverspec:
    docker:
      - image: cimg/ruby:3.2.3        
    steps:
      - checkout
      - attach_workspace:  # 最初に.env_varに設定した変数を使いたいので内容を引き継ぐ
          at: .
      - add_ssh_keys: 
          fingerprints:
             - "SHA256:KOyzFQxvG/olTvvKdqUsZfKalbDceS8lMYyiTxHgy2Q"
      - run: ruby --version
      - run:
          name: serverspec setup 
          command: |
            cd server-spec-sample
            bundle install

      - run: 
          name: crate ~/.ssh/config targat config
          command: |
            set -x
            source .env_var
            mkdir -p ~/.ssh
            echo "Host target" >> ~/.ssh/config
            echo "HostName $ElasticIP" >> ~/.ssh/config
            echo "User ec2-user" >> ~/.ssh/config
            AWS_DB_PW=$(cat /tmp/AWS_DB_PW.txt)
            echo "export AWS_DB_PW=${AWS_DB_PW}" >> $BASH_ENV

      - run:
          name: execution for serverspec the test
          command: |
            cd server-spec-sample/spec
            rake spec

workflows:
  raisetech:
    jobs:
      - cfn-lint
      - execute-cloudformation
      - execute-ansible:
          requires:
            - execute-cloudformation
      - execute-serverspec:
          requires:
            - execute-ansible